#Wireless NIC Preparation
  #Changing Interface names on your laptop

  #this file and parameters are used to set custom udev rules for persistent network interface naming.
    #Don't do this if you have Sceptre installed on your laptop, because Sceptre fucks all of this up.

sudo nano /etc/udev/rules.d/70-persistent-net.rules
  SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?*”, ATTR{address}==”xx:yy:xx:yy:xx:yy”, NAME=”wlan1”

  #this is a udev rule that tells the system how to name a specific network interface based on its MAC address.

sudo nano /etc/default/grub
  GRUB_CMDLINE_LINUX=”net.ifnames=0 biosdevname=0”

 #This is used to update the grub bootloader and the initial RAM filesystem after editing the udev rules.

sudo update-grub
sudo update-initramfs -u 
reboot 

  #Changing the hostname of your workstation or Pi.

sudo hostnamectl hostname [name]
          or
sudo nano /etc/hosts
127.0.1.1 [name]

#Drivers are specific to the chipset used by the wireless NIC. Common chipsets are: Atheros, Mediatek, Broadcom, Realtek. Listed from most reliable to least.
  #You would use the command:
lsusb
  #to identify whether your operating system recognizes the drivers your NIC is using.

#This command is used to display driver and firmware information for a specified interface.

sudo ethtool -i [interface]

#this command allows you to see the real-time ip connections in your computer.

watch ip link

#Aircrack-ng Suite. This is is a suite of tools used for auditing wireless networks. It can monitor, attack, test, and crack.
  #Installation and Config

#You are going to have to download a ton of dependencies based off your OS. I did this off on Debian/Ubuntu so that's what I have there. These dependencies can be found within the "INSTALLING" file on the github or in the aircracked-ng file when you install it.
sudo apt-get update
sudo apt-get install libtool m4 automake pkg-config
git clone https://github.com/theweefies/aircracked-ng
sudo apt-get install build-essential autoconf automake libtool pkg-config libnl-3-dev libnl-genl-3-dev libssl-dev ethtool shtool rfkill zlib1g-dev libpcap-dev libsqlite3-dev libpcre3-dev libhwloc-dev libcmocka-dev hostapd wpasupplicant tcpdump screen iw usbutils
cd aircracked-ng
autoreconf -i 
-./configure
make
sudo make install

#PATH is the list of directories the shell searches when you run a command. This lets the shell find executables/scripts located in /usr/local/lib. 

sudo nano /etc/profile

#add the following line to the end. 

PATH=$PATH:/usr/local/lib 

#GPSD is a service daemon that monitors one or more GPSes or AIS receivers attached to a host computer through serial or USB ports, making all data on the location/course/velocity of the sensors available to be queried on TCP port 2947 of the host computer.
  #Install and Config

sudo apt install gpsd gpsd-clients

#There are multiple ways to verify gps clock. It's really shooter's preference:

gpsmon
  or
cgps
  or
xgps

#configure your /etc/default/gpsd file with these parameters. The GPSD_OPTIONS portion is put there specifically for the BU-353S4 gps, so remove it if your not using that gps and you're not receiving any gps data.

START_DAEMON=”true” (starts the gpsd on boot) 
USBAUTO=”true” (allows hot plugging)
DEVICES=”/dev/ttyUSB0” (tells where to find the gps) 
GPSD_OPTIONS=”-n -G -b”
GPSD_SOCKET=”/var/run/gpsd.sock”

sudo systemctl restart gpsd

#use this command as a troubleshooting step. This will search the kernel ring buffer messages (dmesg) for logs related to the device ttyUSB0 and output whether the device was successfully recognized and the gps puck was attached.

sudo dmesg | grep ttyUSB

#Basic Aircrack-ng

#This command downloads and updates the database of MAC address manufacturer information for the Aircrack-ng suite of tools.

sudo airodump-ng-oui-update

#This will allow you to change your card into monitor mode
sudo airmon-ng check kill
sudo airmon-ng start [interface]

#Start a simple broad survey 
sudo airodump-ng -b abgx -g -w [name or relative file path] -W -M [interface]
  #-b or --band is bands, -g or --gpsd is gpsd, -w is file creation -M or --manufacturer is OUI ID, -z can be used to highlight a target MAC
#other useful flags are: 
  #-U is uptime, -W or --wps is wps column display, -f is speed of channel spacing (200 = driving, 2000 = slow walking)

#pressing tab while the survey is running will let you move through the data. pressing "m" will let you change the color of information fields to maintain situational awareness.

#conducting a targeted survey
sudo airodump-ng -c [CH(s)] -d [Target MAC] -w [name or relative file path] -g -W -M [interface]
  #-c is channel, -d is bssid

#Kismet Config and Usage
  #found at https://www.kismetwireless.net/packages/

#Installation information

wget -O - https://www.kismetwireless.net/repos/kismet-release.gpg.key --quiet | gpg --dearmor | sudo tee /usr/share/keyrings/kismet-archive-keyring.gpg >/dev/null
echo 'deb [signed-by=/usr/share/keyrings/kismet-archive-keyring.gpg] https://www.kismetwireless.net/repos/apt/git/noble noble main' | sudo tee /etc/apt/sources.list.d/kismet.list >/dev/null
sudo apt update
sudo apt install kismet

#Select "yes" when it asks about suid-roots.

#set the /etc/kismet/kismet_site.conf because this is going to be our master logging file for the rest in this directory.

sudo nano /etc/kismet/kismet_site.conf

#Now, we're going to open another file, i.e., the logging file

sudo nano /etc/kismet/kismet_logging.conf

#copy and paste the log_title and optionally the enable_logging fields into kismet site conf.
#set your log types to all of the available and then copy and paste into your site config:

# All logs can be disabled; this will disable logging system-wide.  Generally this
# should be left set to 'true'; logging can be turned off when Kismet is started 
# with the '-n' command line argument
enable_logging=true


# Default log title, can be overridden with the '-t' argument to Kismet
log_title=Kismet

# Default location for logs; by default this is the directory Kismet was launched
# in, but the logs can be automatically stored in other directories as well.
# The directory must exist before Kismet is started - Kismet will /not/ create
# the directory list itself.
log_prefix=[set your working directory]

#MAKE SURE TO SET THE ABSOLUTE FILE PATH OR YOUR KISMET WILL FUCK UP IF YOU

# By default, Kismet only enabled the unified 'kismet' log; the pcapng option is
# provided for special configurations as a legacy fallback mode.
log_types=kismet,pcapppi,pcapng

#enter the kismet_filter.conf and prepare to do more of the same:

# BTLE random MAC filtering
#
# BTLE incorporates a randomized MAC address model; devices using random MACs will 
# advertise services with a constantly-changing MAC address.  This can flood the logs
# with single-packet devices.
#
# Turning on BTLE Random filtering will *ignore all btle devices with a random mac*. 
# These devices *will not be logged as devices or shown in the ui*, however their
# packets will still be logged in kismetdb and pcap.
#
# Filtering BTLE random devices will prevent a huge overflow of devices in the log and
# UI, however it will also prevent these devices from being shown.

btle_ignore_random=true

# Specific devices can be included or excluded from logging based on MAC
# address.  This will filter all devices of that MAC from the log; they
# will still be tracked, but will not be written to the log.
# kis_log_device_filter=phyname,macaddress,value
#
# MACs can be specified as single MACs or as masked MAC groups
#
kis_log_device_filter=IEEE802.11,aa:bb:cc:dd:ee,pass
kis_log_device_filter=IEEE802.11,11:22:33:00:00:00/FF:FF:FF:00:00:00,block

#where those aa:bb:cc... etc is where your whitelisted (team) MACs should go in the block section.
#Same thing with the packet:

# Packets can be included or excluded from logging based on MAC address by
# source, destination, network, or other; the exact meaning of these
# addresses depends on the PHY type.  For Wi-Fi, the 'other' address is used
# only in WDS 4-mac environments.
# Additionally, packets may be matched on 'any' address.
# Packet filters are defined as:
# kis_log_packet_filter=phyname,addresstype,macaddress,value

kis_log_packet_filter=IEEE802.11,source,aa:bb:cc:dd:ee,pass

# Filters can also use MAC address group matches:
kis_log_packet_filter=IEEE802.11,any,11:22:33:00:00:00/ff:ff:ff:00:00:00,block

#onto the kismet_alerts.conf:

# Device alerts
# Kismet can raise alerts when a device is seen for the first time (or seen again
# after being idle) via the 'devicefound' alert.
#
# Masked MAC addresses may be used to match all devices which fall within
# the mask, for instance 00:11:22:00:00:00/FF:FF:FF:00:00:00 will match 
# the first 3 bytes of the MAC
# devicefound=00:11:22:33:44:55

#Next is Kismet.conf for gps and virtual gps:

# How fast do we hop channels?  Time can be hops/second or hops/minute.
channel_hop_speed=5/sec

# Kismet supports multiple types of GPS.  Generally you should only activate one of these
# options at a time.
#
# Only one process can open a serial or USB device at the same time; if you are using GPSD,
# make sure not to configure Kismet on the same serial port.
#
# For more information about the GPS types, see the documentation at:
# https://www.kismetwireless.net/docs/readme/gps/
#
# gps=serial:device=/dev/ttyACM0,name=laptop
# gps=tcp:host=1.2.3.4,port=4352
gps=gpsd:host=localhost,port=2947
# gps=virtual:lat=123.45,lon=45.678,alt=1234
# gps=web:name=gpsweb

#we want to make sure that gpsd is uncommented once we put it into the site.conf.
#Now make sure to save the config file and save a copy externally.












